비주얼 스튜디오코드 설치
-code Runner
-Live Preview
-Live Server
-Pritter - Code formatter (설치후 왼쪽아래 톱니바퀴 >> Settings >> Editor:Format On Save 체크>> Editor:Default Formatter에 Prettier - Code formatter 선택 후 저장
1.React 폴더 생성
폴더 생성 : npx create-react-app 폴더
로컬 실행 : cd 폴더 이동 >> npm run start
       실행 주소 : http://localhost:3000
                     http://ipconfig주소:3000( http://192.168.0.17:3000/)


router-dom : npx create-react-app 폴더 진행 후 npm install react-router-dom 실행.
     확인방법 : package.json에 "react-router-dom": "^7.7.1", 있는지 확인

조창제 강사님 git 주소 : git clone https://gitlab.cjcho.site/development/form/react_form
git clone https://gitlab.cjcho.site/development/form/react_form/
git clone https://gitlab.cjcho.site/lacture_human/lacture_250721/250728
git pull https://gitlab.cjcho.site/lacture_human/lacture_250721/250728
백앤드 강의 : git clone https://gitlab.cjcho.site/lacture_human/lacture_250721/250804

nginx 관련 깃 주소 : git clone https://gitlab.cjcho.site/lacture_human/nginx
                         git clone https://github.com/choinamhoe/nginx

git clone https://gitlab.cjcho.site/development/form/electron_py_backend_form

docker 서비스 실행 방법 : docker 설치 후  git clone https://github.com/choinamhoe/nginx 다운

localhost 실행 : cmd창 실행 -> 위에 깃주소 받은 경로로 이동 -> build한 폴더를 app폴더안에 넣고 ->docker-compose up -d 실행
                    localhost창에 build폴더에 넣어준 것이 됨.

npm 설치 방법 : npm install react-router-dom
                    프로젝트 시작 npm run start
                    프로젝트 종료는 Ctrl + C
react 검사 부분은 <React.StrictMode></React.StrictMode>안에서 실행한다.

@@@@@@@@@@@@@@@@@@@@@ 클릭건수 출력 방법(React)
import { useEffect, useState } from "react";

const [count, setCount] = useState(0);
  useEffect(() => {
    console.log("count 값은", count);
  }, [count]);
  const handleClick = () => {
    setCount(count + 1);
  };
  return (
    <>
      <button onClick={handleClick}>버튼</button>
      <p>{count}</p>
    </>
  );
@@@@@@@@@@@@@@@@@@@@@



------------------------------------------------------------------------------------------------------------------
일렉토리 패키지 : 프런트와 백앤드가 모두 공유하는 프로젝트.
일렉토리 깃 주소 : git clone https://gitlab.cjcho.site/development/form/electron_py_backend_form
visual Studio Code -> electron_py_backend_form 폴더 진행 후 npm run electron:start

Anaconda Prompt을 열고 순서대로 실행
1)pip install fastapi
2)where conda ==> where python 에 나온 경로를 main.js에 
   pythonProcess = spawn("C:/Users/human/anaconda3/python", [pythonFilePath]); 경로에 맞춰 줄것
3)pip install uvicorn 
4) visual Studio Code -> electron_py_backend_form 폴더 이동 후 npm run electron:start

결과값 : 메시지 가져오기 버튼 클릭 하면 => Hello from FastAPI! 결과값이 출력되어야 정상

------------------------------------------------------------------------------------------------------------------
백앤드 관련 실행 명령어(test1.js에 소스 수정할 경우) : 
-nodemon은 반영시 서버를 재기동 해야 하는 부분을 프런트앤드처럼 실시간으로 실행할때 반영되게 하는 명령어 
-package.json에 
 "scripts": {
    "start": "nodemon test1.js"
  },
수정을 하면 npm run start로 실행 가능.

js에서 해당 경로 이동 후 아래 순서대로 실행(주석처리한 4가지 순서대로 실행.crud_eazy_server.js 파일 참조)
// npm init -y
// npm install express cookie-parser express-session jsonwebtoken body-parser
// npm install -g nodemon
// nodemon test1.js

package.json : 내부 명령어
-scripts : 명령어 생성 및 수정,관리
-dependencies는 설치된 npm install 실행시 설치된 버전 확인