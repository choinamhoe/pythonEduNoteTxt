비주얼 스튜디오코드 설치
-code Runner
-Live Preview
-Live Server
-Pritter - Code formatter (설치후 왼쪽아래 톱니바퀴 >> Settings >> Editor:Format On Save 체크>> Editor:Default Formatter에 Prettier - Code formatter 선택 후 저장
1.React 폴더 생성
폴더 생성 : npx create-react-app 폴더
로컬 실행 : cd 폴더 이동 >> npm run start
       실행 주소 : http://localhost:3000
                     http://ipconfig주소:3000( http://192.168.0.17:3000/)


router-dom : npx create-react-app 폴더 진행 후 npm install react-router-dom 실행.
     확인방법 : package.json에 "react-router-dom": "^7.7.1", 있는지 확인

                         
조창제 강사님 git 주소 : 기본 주소(8월 18일날 제공) - https://gitlab.cjcho.site/lacture_human/lacture_250721
git clone https://gitlab.cjcho.site/development/form/react_form
git clone https://gitlab.cjcho.site/development/form/react_form/
git clone https://gitlab.cjcho.site/lacture_human/lacture_250721/250728
git pull https://gitlab.cjcho.site/lacture_human/lacture_250721/250728
백앤드 강의 : git clone https://gitlab.cjcho.site/lacture_human/lacture_250721/250804
데이터베이스 강의 : lacture_human / lacture_250721 / 250806 · GitLab
                         git clone http://gitlab.cjcho.site/lacture_human/lacture_250721/250806.git

기상청 기상자료개발포털 : https://data.kma.go.kr/cmmn/main.do
                                 cnh665@naver.com//cnhmook176!
                                 로그인 후 관측>>메타데이터>>지도로선택>>지상>>종관기상관측>>전체선택후 조회>>csv버튼 클릭
조창제강사_해양자료시각화_심평원인공지능자료 : git clone https://gitlab.cjcho.site/lacture_human/lacture_250721/250813

포스트맨,프런트앤드,백앤드,코랩 기동 방법(동영상 포함) : https://gitlab.cjcho.site/lacture_human/lacture_250721/99_req
cheatsheets.pdf · main · lacture_human / lacture_250721 / 250813 · GitLab
Matplotlib 이미지 함수 api : Examples — Matplotlib 3.10.5 documentation
                                   https://matplotlib.org/stable/gallery/index.html
                                   https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html
                                   https://gitlab.cjcho.site/lacture_human/lacture_250721/250813/-/blob/main/cheatsheets.pdf?ref_type=heads

<!--  프론트  -->
git clone https://gitlab.cjcho.site/lacture_human/lacture_250721/250804 cookie_session_ex
cd cookie_session_ex
cd front
npm install 
npm run start

<!-- 백엔드 -->
// npm init -y
// npm install express cookie-parser express-session
// npm install jsonwebtoken body-parser cors
// npm install -g nodemon
npm install 
nodemon cookie_eazy_server.js
nodemon session_eazy_server.js

내 깃주소 : git clone https://github.com/choinamhoe/
교육자료 정리 : git clone https://github.com/choinamhoe/pythonEduNoteTxt
 db 연결       :  git clone https://github.com/choinamhoe/db_connect_lecture.git
쿠키,섹션예제: git clone https://github.com/choinamhoe/cookie_session_ex.git
백앤드관련 강의: git clone https://github.com/choinamhoe/backend_lecture.git 
일렉토리 패키지: git clone https://github.com/choinamhoe/electron_py_backend_form.git
nginx 관련 깃 주소 : git clone https://gitlab.cjcho.site/lacture_human/nginx
                         git clone https://github.com/choinamhoe/nginx
리엑트_기본폼 : git clone https://github.com/choinamhoe/react_form.git
리엑트 라운터테스트 : git clone https://github.com/choinamhoe/route_test.git
스타벅스 로직 구현진행중 : git clone https://github.com/choinamhoe/starbucks.git
weather_cron(크론탭같은 자동 실행방법)  : git clone https://github.com/choinamhoe/weather_cron.git
                        
weather_cron : https://gitlab.cjcho.site/lacture_human/weather_cron
git clone https://gitlab.cjcho.site/development/form/electron_py_backend_form

docker 서비스 실행 방법 : docker 설치 후  git clone https://github.com/choinamhoe/nginx 다운

localhost 실행 : cmd창 실행 -> 위에 깃주소 받은 경로로 이동 -> build한 폴더를 app폴더안에 넣고 ->docker-compose up -d 실행
                    localhost창에 build폴더에 넣어준 것이 됨.

npm 설치 방법 : npm install react-router-dom
                    프로젝트 시작 npm run start
                    프로젝트 종료는 Ctrl + C
react 검사 부분은 <React.StrictMode></React.StrictMode>안에서 실행한다.

@@@@@@@@@@@@@@@@@@@@@ 클릭건수 출력 방법(React)
import { useEffect, useState } from "react";

const [count, setCount] = useState(0);
  useEffect(() => {
    console.log("count 값은", count);
  }, [count]);
  const handleClick = () => {
    setCount(count + 1);
  };
  return (
    <>
      <button onClick={handleClick}>버튼</button>
      <p>{count}</p>
    </>
  );
@@@@@@@@@@@@@@@@@@@@@



------------------------------------------------------------------------------------------------------------------
일렉토리 패키지 : 프런트와 백앤드가 모두 공유하는 프로젝트.
일렉토리 깃 주소 : git clone https://gitlab.cjcho.site/development/form/electron_py_backend_form
visual Studio Code -> electron_py_backend_form 폴더 진행 후 npm run electron:start

Anaconda Prompt을 열고 순서대로 실행
1)pip install fastapi
2)where conda ==> where python 에 나온 경로를 main.js에 
   pythonProcess = spawn("C:/Users/human/anaconda3/python", [pythonFilePath]); 경로에 맞춰 줄것
3)pip install uvicorn 
4) visual Studio Code -> electron_py_backend_form 폴더 이동 후 npm run electron:start

결과값 : 메시지 가져오기 버튼 클릭 하면 => Hello from FastAPI! 결과값이 출력되어야 정상

------------------------------------------------------------------------------------------------------------------
백앤드 관련 실행 명령어(test1.js에 소스 수정할 경우) : 
-nodemon은 반영시 서버를 재기동 해야 하는 부분을 프런트앤드처럼 실시간으로 실행할때 반영되게 하는 명령어 
-package.json에 
 "scripts": {
    "start": "nodemon test1.js"
  },
수정을 하면 npm run start로 실행 가능.

js에서 해당 경로 이동 후 아래 순서대로 실행(주석처리한 4가지 순서대로 실행.crud_eazy_server.js 파일 참조)
// npm init -y
// npm install express cookie-parser express-session jsonwebtoken body-parser
// npm install -g nodemon
// nodemon test1.js

package.json : 내부 명령어
-scripts : 명령어 생성 및 수정,관리
-dependencies는 설치된 npm install 실행시 설치된 버전 확인
------------------------------------------------------------------------------------------------------------------
자바스크립트와 백앤드 안에서 파이썬 환경설정( : 비주얼 스튜디오 코드에서 작업)
1)파이썬 안에서 Fastapi 환경 설정
1.Ctrl + Shift + p
2.select interpreter
3.파이썬 환경 선택

4.터미널 창에 휴지통 모양 클릭해서 터미널 꺼주기
5.상단창에 ... 클릭해서 Terminal >  New Terminal
6.해당 경로 선택 후 pip install fastapi unicorn 실행
6.python fastapi_server.py
코딩 : 
#pip install fastapi unicorn
from fastapi import FastAPI
import uvicorn

app = FastAPI()
uvicorn.run(app,host="0.0.0.0",port=8080)

INFO:     Started server process [8956]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
위에 방식으로 나오면 성공
한번만 실행할 때 : python main.py
계속 서버 띠우게 하는 방법 : uvicorn main:app --reload --port 8000
------------------------------------------------------------------------------------------------------------------
프런트앤드와 백앤드 호출
1.권한이 있는 사이트만 접근하게 하는 방법(cookie_example.js로 확인)
-cors를 통해 접근권한 셋팅가능
-환경설정 : 
// npm init -y
// npm install express cookie-parser express-session
// npm install jsonwebtoken body-parser cors
// npm install -g nodemon

app.use(
  cors({
    origin: "http://localhost:3000",
    credentials: true,
  })
);

2.프런트앤드에서 할일
-npx create-react-app frontend
-cd frontend => npm install axios react-router-dom
-npm run start
-브라우저에서 F12 > Application 클릭하면 Cookies에 http://localhost:3000통해 쿠키가 저장
                                                     Local storage는 끄기전까지 유지
------------------------------------------------------------------------------------------------------------------
파이썬과 mysql(mariaDB) 연결 방법
1.Anaconda.NAVIGATOR에서 연결
1)Anaconda 프롬포트 :
-pip install sqlalchemy fastapi uvicorn starlette pymysql bcrypt pandas
-conda activate 가상환경명

2)mysql db연결정보 포함하여 로컬 db 연결 방법(dbeaver에 연결된 부분으로 셋팅- docker로 연결 후 실행)
https://github.com/choinamhoe/pythonEduNoteTxt 안에
/python_Spyder_example/250808_최남회_spyder_database_example.py예제 참조

with구문은 connect연결후 잠깐만 사용할때 그 구문안에서만 연결 conn연결 자동으로 연결 후 끊어지게 하기 위한 방법
------------------------------------------------------------------------------------------------------------------
selenium :  인터넷 상에서 정보를 파이썬으로 가져오고 싶을때(pandas와 결합하여도 가능) 쓰는 방법
               크롤링 할때 쓰는 패키지
-파일 : 250808_최남회_spyder_database_selenium예제.py
-환경설정 방법 : https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/?form=MA13LH#downloads 접속
                   Stable Channel에서 최신 버전으로 x64 다운로드
                   edge://settings/help 자동 설치후 엣지 다시 시작

-spyder_database_selenium예제.py : driver실행 하면 엣지창이 자동으로 떠야 함.
                                              해당 창에 다른 창은 작업이 안되고 해당창에서 가능
                                              1창에서 무조건 가능하고 다른창 열려도 첫번째 열린창으로 주소를 옮겨서 할것
                                              다나와,멜론 사이트(https://www.melon.com/chart/)에서 띠운후에 작업을 실행해야 정상작동
                                              드라이브 끌때 : #드라이브 끄려고 할때 방법
                                               driver.quit()
------------------------------------------------------------------------------------------------------------------
크론탭 실행방법(docker이용하여 실행방법)
weather_cron : https://gitlab.cjcho.site/lacture_human/weather_cron
코론탭처럼 실행되게 하는 방법
-최초 설치 : cmd창에서 해당 패키지 이동 docker build -t cron_test:latest -f Dockerfile .
-(docker을 이용하여 리눅스에서 실행)                   
크론탭 docker 실행 : 해당 패키지 이동 후 실행 - docker-compose up -d 
크론탭 docker 실행중지 :                                   docker-compose down

크론탭 수정 후 : docker-compose down 실행 후
                      빌드(docker build -t cron_test:latest -f Dockerfile .)<<docker-compose up -d 
                     여기서부터 다시 실행해야 정상 반영.

docker exec -it weathercron bash ==> ?????
------------------------------------------------------------------------------------------------------------------
로그인 구현(회원가입)
-pip install sqlalchemy fastapi uvicorn starlette pymysql bcrypt pandas
from pydantic import BaseModel
class User(BaseModel):
    userid: str
    username: str
    password: str

@app.post("/users")
async def create_user(data:User) :
     print(data)
     print(data.userid,data.username,data.password)

     return JSONResponse(
        content={"message":"회원가입 API 테스트"},
        status_code=status.HTTP_200_OK
    )
------------------------------------------------------------------------------------------------------------------
비밀번호 검증방법 코딩 => 실행이 안될 경우 pip install bcrypt 실행
import bcrypt

     hashed_pw = bcrypt.hashpw(data.password.encode(),
                            bcrypt.gensalt()
                            ).decode("utf-8")
     print(hashed_pw)
     #비밀번호 검증 부분
     print(
         bcrypt.checkpw(
             'mook176!'.encode('utf-8'),
             hashed_pw.encode('utf-8'),
         )
     )
     print(
         bcrypt.checkpw(
             data.password.encode('utf-8'),
             hashed_pw.encode('utf-8'),
         )
     )
------------------------------------------------------------------------------------------------------------------
cv2 : 이미지를 임포트 하는 함수
# 아나콘다 명령 프로포트에서 패키지 이동 후 pip install numpy==1.26 opencv-python
#이게 설치가 안될 경우 pip install numpy opencv-python 로 설치 할것
#cv2.imread할때 한글 폴더로 된 경로는 읽지 못함.
#이미지경로를 영문으로 된 폴더로 호출할 것
import cv2
import numpy as np 
import matplotlib.pyplot as plt
files = [
    "E:/choinamhoe/images/img1.jpg",
    "E:/choinamhoe/images/img2.jpg",
    "E:/choinamhoe/images/img3.jpg"
    ]
cv2.imread(files[0]).shape 
cv2.imread(files[1]).shape
cv2.imread(files[2]).shape
imgs = []
for file in files:
    img = cv2.imread(file)
    new_img = cv2.resize(img, (512,512))
    imgs.append(new_img)
np.array(imgs).shape

arrs = np.array(imgs)
%matplotlib auto
plt.imshow(arrs[0][:,:,::-1])
------------------------------------------------------------------------------------------------------------------
빅데이터 : https://action-makes-fortune.tistory.com/entry/빅데이터분석기사-3회-실기-문제-복원-기출
              https://www.dataq.or.kr/www/main.do
------------------------------------------------------------------------------------------------------------------
지도 판다스 관련 : 
pip install geopandas
pip install contextily

import geopandas as gpd
import matplotlib.pyplot as plt
%matplotlib auto
shp_file = "E:/최남회/파이썬개발에대한파일모음/기상철 기상자료개발포털/20250819/ctprvn_20230729/ctprvn.shp"
gdf = gpd.read_file(shp_file)
gdf = gdf.set_crs("EPSG:5179", allow_override=True)
gdf = gdf.to_crs(epsg=4326)
gdf.plot()
import contextily as ctx
------------------------------------------------------------------------------------------------------------------
20250820
folium
설치 : pip install folium  scikit-learn  seaborn
[Python] 파이썬 폴리움(folium) - 지도 시각화 라이브러리 : https://m.blog.naver.com/dsz08082/222801593268
브이월드 : https://www.vworld.kr/v4po_main.do
[QGIS] V-World 데이터 연결(WMS/WFS) - 브이월드 데이터 연결 방법 : https://m.blog.naver.com/cherish_0920/223081462153	
8. Dataset loading utilities — scikit-learn 1.7.1 documentation : https://scikit-learn.org/stable/datasets.html
중국 데이터 一文看懂seaborn的pairplot - 知乎 : https://zhuanlan.zhihu.com/p/389361816

import sklearn, seaborn, folium

1) 백그라운드 및 쓰는 방식 : https://python-visualization.github.io/folium/latest/user_guide/raster_layers/tiles.html
import folium
#m = folium.Map(location=[37.5665, 126.9780], zoom_start=12)
m = folium.Map(location=[37.5665, 126.9780],
               zoom_start=15, 
               tiles="cartodb positron") 
m.save('map.html')
------------------------------------------------------------------------------------------------------------------